global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]]
texIgnoreMathZones = ['texMathText']
texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
ignore = texIgnoreMathZoneIds[0]
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False
def create_row_placeholders(snip):
	# retrieving single line from current string and treat it like tabstops
	# count
	placeholders_amount = int(snip.buffer[snip.line].strip())

	# erase current line
	snip.buffer[snip.line] = ''

	# create anonymous snippet with expected content and
	# number of tabstops
	anon_snippet_body = ' & '.join(['$' + str(i+1) for i in range(placeholders_amount)])

	# expand
	# anonymous
	# snippet
	snip.expand_anon(anon_snippet_body)
endglobal

post_jump "create_row_placeholders(snip)"
snippet "(\d+)--" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet ppx "Partial derivative" wA
\\frac{\\partial $1}{\\partial $2}$0
endsnippet

snippet b "textbf"
\\textbf{${VISUAL}$1}$0
endsnippet

snippet i "emph"
\\emph{${VISUAL}$1}$0
endsnippet

snippet # "section" b
\\section{$1}
$0
endsnippet

snippet ## "subsection" b
\\subsection{$1}
$0
endsnippet

snippet ### "subsubsection" b
\\subsubsection{$1}
$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\]$0
endsnippet

snippet QED "Tombstone" wA
$\hfill\square$ $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet iff "iff" A
\\Leftrightarrow
endsnippet

context "math()"
snippet thn "implies" A
\\Rightarrow
endsnippet

context "math()"
snippet <= "leq" A
\\leq 
endsnippet

context "math()"
snippet >= "geq" A
\\geq 
endsnippet

context "math()"
snippet != "ne" A
\\ne 
endsnippet

context "math()"
snippet ~~ "approx" A
\\approx 
endsnippet

context "math()"
snippet ... "ldots" iA
\\ldots
endsnippet

context "math()"
snippet '(?<!\\)sum' "Sigma" irA
\\sum
endsnippet

context "math()"
snippet '\\sum' "Sigma" wr
\\sum_{$1}$0
endsnippet

context "math()"
snippet '(\\sum_\{.*\})' "Sigma" r
`!p snip.rv = match.group(1)`^{$1}$0
endsnippet

context "math()"
snippet DD "Delta" iA
\\Delta
endsnippet

context "math()"
snippet AA "For all" iA
\\forall
endsnippet

context "math()"
snippet EE "Exists" iA
\\exists
endsnippet

context "math()"
snippet ee "element" iA
\\in
endsnippet

context "math()"
snippet set "set" wA
\\{$1:$2\\}$0
endsnippet

context "math()"
snippet CC "Complex Number" iA
\\mathbb\{C\}
endsnippet

context "math()"
snippet RR "Real Number" iA
\\mathbb\{R\}
endsnippet

context "math()"
snippet NN "Natural Number" iA
\\mathbb\{N\}
endsnippet

context "math()"
snippet QQ "Rational Number" iA
\\mathbb\{Q\}
endsnippet

context "math()"
snippet ZZ "Integer Number" iA
\\mathbb\{Z\}
endsnippet

snippet - "item"
\\item
endsnippet

context "math()"
snippet text "text" A
\\text{$1}$0
endsnippet

context "math()"
snippet | "abs" A
|$1|$0
endsnippet

context "math()"
snippet norm "norm" A
\\|$1\\|$0
endsnippet

snippet code "verbatim"
\\begin{verbatim}
	$1
\\end{verbatim}
endsnippet

snippet list "itemize"
\\begin{itemize}
	\item $1
\\end{itemize}
$0
endsnippet

snippet steps "enumerate"
\\begin{enumerate}
	\item $1
\\end{enumerate}
$0
endsnippet

snippet box "mdframed"
\\begin{mdframed}
	${VISUAL}$1
\\end{mdframed}
$0
endsnippet

snippet pf "proof"
\\begin{proof}
	$1
\\end{proof}
$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "fun([a-zA-Z])" "Function" wrA
`!p snip.rv=match.group(1)` : $1 \to $2
endsnippet

context "math()"
snippet -> "arrow" iA
\to 
endsnippet

context "math()"
snippet cc "subset" iA
\subset
endsnippet

context "math()"
snippet \subset "subseteq" i
\subseteq
endsnippet


